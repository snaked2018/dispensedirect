window.lazySizesConfig = window.lazySizesConfig || {};
window.lazySizesConfig.expand = 150;
window.lazySizesConfig.loadMode = 1;
window.lazySizesConfig.loadHidden = false;

gsap.defaults({
  ease: 'power1.out'
});

gsap.config({
  nullTargetWarn: false
});

if (typeof debounce === 'undefined') {
  function debounce(fn, wait) {
    let t;
    return (...args) => {
      clearTimeout(t);
      t = setTimeout(() => fn.apply(this, args), wait);
    };
  }
}

/**
 *  @class
 *  @function ProductCard
 */
if (!customElements.get('product-card')) {
  class ProductCard extends HTMLElement {
    constructor() {
      super();
      this.quick_add = this.querySelector('.product-card--add-to-cart-button-simple');
    }
    connectedCallback() {
      if (this.quick_add) {
        this.enableQuickAdd();
      }
    }
    enableQuickAdd() {
      this.quick_add.addEventListener('click', this.quickAdd.bind(this));
    }

    quickAdd(evt) {
      evt.preventDefault();
      if (this.quick_add.disabled) {
        return;
      }
      this.quick_add.classList.add('loading');
      this.classList.add('thb-loading');
      this.quick_add.innerHTML = window.theme.strings.addingToCart;
      this.quick_add.setAttribute('aria-disabled', true);

      const config = {
        method: 'POST',
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
          'Accept': 'application/javascript'
        }
      };

      let formData = new FormData(this.form);

      formData.append('id', this.quick_add.dataset.productId);
      formData.append('quantity', 1);
      formData.append('sections', this.getSectionsToRender().map((section) => section.section));
      formData.append('sections_url', window.location.pathname);

      config.body = formData;

      fetch(`${theme.routes.cart_add_url}`, config)
        .then((response) => response.json())
        .then((response) => {
          if (response.status) {
            return;
          }
          this.renderContents(response);

          dispatchCustomEvent('cart:item-added', {
            product: response.hasOwnProperty('items') ? response.items[0] : response
          });
        })
        .catch((e) => {
          console.error(e);
        })
        .finally(() => {
          this.quick_add.innerHTML = window.theme.strings.addToCart;
          this.classList.remove('thb-loading');
          this.quick_add.classList.remove('loading');
          this.quick_add.removeAttribute('aria-disabled');
        });

      return false;
    }
    getSectionsToRender() {
      return [{
        id: 'Cart',
        section: 'main-cart',
        selector: '.thb-cart-form'
      },
      {
        id: 'Cart-Drawer',
        section: 'cart-drawer',
        selector: '.cart-drawer'
      },
      {
        id: 'cart-drawer-toggle',
        section: 'cart-bubble',
        selector: '.float_count'
      }];
    }
    renderContents(parsedState) {
      this.getSectionsToRender().forEach((section => {
        if (!document.getElementById(section.id)) {
          return;
        }
        const elementToReplace = document.getElementById(section.id).querySelector(section.selector) || document.getElementById(section.id);
        elementToReplace.innerHTML = this.getSectionInnerHTML(parsedState.sections[section.section], section.selector);

        if (section.id == 'Cart-Drawer') {
          if (typeof CartDrawer !== 'undefined') {
            new CartDrawer();
          }
        }
        if (section.id == 'Cart') {
          if (typeof Cart !== 'undefined') {
            new Cart().renderContents(parsedState);
          }
        }
      }));

      let quick_shop = document.getElementById('Quick-Drawer'),
        cart_drawer = document.getElementById('Cart-Drawer'),
        latency = 100;

      if (cart_drawer && quick_shop?.contains(this)) {

        quick_shop.querySelector('.thb-close').click();

        latency = 750;
      }

      setTimeout(() => {
        document.getElementById('cart-drawer-toggle').click();
        dispatchCustomEvent('cart-drawer:open');
      }, latency);

    }
    getSectionInnerHTML(html, selector = '.shopify-section') {
      return new DOMParser()
        .parseFromString(html, 'text/html')
        .querySelector(selector).innerHTML;
    }
  }
  customElements.define('product-card', ProductCard);
}

/**
 *  @class
 *  @function LocalizationForm
 */
if (!customElements.get('localization-form')) {
  class LocalizationForm extends HTMLElement {
    constructor() {
      super();
      this.form = this.querySelector('form');
      this.inputs = this.form.querySelectorAll('[name="locale_code"], [name="country_code"]');
      this.debouncedOnSubmit = debounce((event) => {
        this.onSubmitHandler(event);
      }, 200);
      this.inputs.forEach(item => item.addEventListener('change', this.debouncedOnSubmit.bind(this)));
    }
    onSubmitHandler(event) {
      if (this.form) this.form.submit();
    }
  }
  customElements.define('localization-form', LocalizationForm);
}

/**
 *  @class
 *  @function CartDrawer
 */
class CartDrawer {

  constructor(args) {
    this.container = document.getElementById('Cart-Drawer');
    this.wrapper = document.getElementById('wrapper');
    this.cc = document.querySelector('.click-capture');

    if (!this.container) {
      return;
    }
    this.close = this.container.querySelector('.thb-close');
    this.button = document.getElementById('cart-drawer-toggle');

    // Add functionality to buttons
    this.setupCartAnimation();

    // Setup Events
    this.setupEventListeners();

    // Notes Toggle
    this.notesToggle();

    // Remove buttons
    this.removeProductEvent();

    // Terms checkbox
    this.termsCheckbox();
  }
  setupCartAnimation() {
    this.tl = gsap.timeline({
      paused: true,
      onStart: () => {
        this.wrapper.classList.add('open-cc');
        gsap.set(this.container, {
          visibility: "visible"
        });
      },
      onReverseComplete: () => {
        this.wrapper.classList.remove('open-cc');
        gsap.set(this.container, {
          clearProps: "transform"
        });
        this.container.blur();
      },
      onComplete: () => {
        this.container.focus();
        dispatchCustomEvent('cart-drawer:open');
      }
    });
    this.tl.clear();
    this.tl
      .to(this.container, {
        x: "0%",
        duration: 0.25
      }, "start")
      .fromTo(this.container.querySelectorAll('.mini_cart_item, .mini-cart__row, .mini-cart__notes, .mini-cart__buttons'), {
        x: "30",
        opacity: 0
      }, {
        duration: 0.25,
        x: "0",
        opacity: 1,
        stagger: 0.05
      }, "start+=0.2");
  }
  closeDrawer() {
    this.tl.timeScale(1.5).reverse();
  }
  setupEventListeners() {
    this.debouncedOnChange = debounce((event) => {
      this.onChange(event);
    }, 300);

    document.addEventListener('cart:refresh', (event) => {
      this.refresh();
    });

    this.container.addEventListener('change', this.debouncedOnChange.bind(this));

    this.button.addEventListener('click', (e) => {

      if (document.body.classList.contains('template-cart')) {
        return false;
      }
      this.tl.timeScale(1).play();
      e.preventDefault();
    });

    this.cc.addEventListener('click', this.closeDrawer.bind(this));
    this.close.addEventListener('click', this.closeDrawer.bind(this));

    document.addEventListener('keyup', (e) => {
      if (e.code) {
        if (e.code.toUpperCase() === 'ESCAPE') {
          this.closeDrawer();
        }
      }
    });
  }
  onChange(event) {
    if (event.target.classList.contains('qty')) {
      this.updateQuantity(event.target.dataset.index, event.target.value);
    }
  }
  removeProductEvent() {
    let removes = this.container.querySelectorAll('.remove');

    removes.forEach((remove) => {
      remove.addEventListener('click', (event) => {
        this.updateQuantity(event.target.dataset.index, '0');

        event.preventDefault();
      });
    });
  }
  getSectionsToRender() {
    return [{
      id: 'Cart-Drawer',
      section: 'cart-drawer',
      selector: '.side-panel-content'
    },
    {
      id: 'cart-drawer-toggle',
      section: 'cart-bubble',
      selector: '.float_count'
    }];
  }
  getSectionInnerHTML(html, selector) {
    return new DOMParser()
      .parseFromString(html, 'text/html')
      .querySelector(selector).innerHTML;
  }
  termsCheckbox() {
    let terms_checkbox = this.container.querySelector('#CartDrawerTerms'),
      checkout_button = this.container.querySelector('.button.checkout');

    if (terms_checkbox && checkout_button) {
      terms_checkbox.setCustomValidity(theme.strings.requiresTerms);
      checkout_button.addEventListener('click', function (e) {
        if (!terms_checkbox.checked) {
          terms_checkbox.reportValidity();
          terms_checkbox.focus();
          e.preventDefault();
        }
      });
    }
  }
  notesToggle() {
    let notes_toggle = document.getElementById('order-note-toggle');

    if (!notes_toggle) {
      return;
    }

    notes_toggle.addEventListener('click', function () {
      notes_toggle.classList.toggle('active');
    });
    notes_toggle.nextElementSibling.querySelector('.button').addEventListener('click', () => {
      notes_toggle.classList.remove('active');
      this.saveNotes();
    });
  }
  saveNotes() {
    fetch(`${theme.routes.cart_update_url}.js`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': `application/json`
      },
      body: JSON.stringify({
        'note': document.getElementById('mini-cart__notes').value
      })
    });
  }
  updateQuantity(line, quantity) {
    this.container.querySelector(`#CartDrawerItem-${line}`).classList.add('thb-loading');
    const body = JSON.stringify({
      line,
      quantity,
      sections: this.getSectionsToRender().map((section) => section.section),
      sections_url: window.location.pathname
    });

    dispatchCustomEvent('line-item:change:start', {
      quantity: quantity
    });
    fetch(`${theme.routes.cart_change_url}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': `application/json`
      },
      ...{
        body
      }
    })
      .then((response) => {
        return response.text();
      })
      .then((state) => {
        const parsedState = JSON.parse(state);

        this.getSectionsToRender().forEach((section => {
          const elementToReplace = document.getElementById(section.id).querySelector(section.selector) || document.getElementById(section.id);

          if (parsedState.sections) {
            elementToReplace.innerHTML = this.getSectionInnerHTML(parsedState.sections[section.section], section.selector);
          }
        }));
        this.removeProductEvent();
        this.notesToggle();
        this.termsCheckbox();
        dispatchCustomEvent('line-item:change:end', {
          quantity: quantity,
          cart: parsedState
        });
        if (this.container.querySelector(`#CartDrawerItem-${line}`)) {
          this.container.querySelector(`#CartDrawerItem-${line}`).classList.remove('thb-loading');
        }
      });
  }
  refresh() {
    let sections = 'cart-drawer,cart-bubble';
    fetch(`${window.location.pathname}?sections=${sections}`)
      .then((response) => {
        return response.text();
      })
      .then((state) => {
        const parsedState = JSON.parse(state);

        this.getSectionsToRender().forEach((section => {
          const elementToReplace = document.getElementById(section.id).querySelector(section.selector) || document.getElementById(section.id);

          elementToReplace.innerHTML = this.getSectionInnerHTML(parsedState[section.section], section.selector);
        }));

        this.removeProductEvent();
        this.notesToggle();
        this.termsCheckbox();
      });
  }
}

/**
 *  @class
 *  @function Animation
 */
class ScrollAnimation {
  constructor() {
    this.elements = document.querySelectorAll('.animation');
    this.args = {
      duration: 0.75,
      ease: 'power1.out',
      autoAlpha: 1,
      x: 0,
      y: 0,
      z: 0,
      scale: 1,
      rotationZ: '0deg',
      rotationX: '0deg',
      rotationY: '0deg',
      stagger: 0.3,
    };

    this.setupScrollTrigger();
  }
  setupScrollTrigger() {

    ScrollTrigger.config({ limitCallbacks: true });
    ScrollTrigger.batch(this.elements, {
      onEnter: batch => gsap.to(batch, this.args),
      onEnterBack: batch => gsap.to(batch, this.args),
    });
    window.dispatchEvent(new Event('scroll'));
  }
}

/**
 *  @class
 *  @function RetinaJS
 */
if (typeof RetinaJS == 'undefined') {
  class RetinaJS {
    constructor() {
      this.elements = document.querySelectorAll('img.retina_size:not(.retina_active)');

      this.elements.forEach(function (elem) {
        let w = elem.getAttribute('width'),
          h = elem.getAttribute('height');

        elem.setAttribute('width', w / 2);

        if (h) {
          elem.setAttribute('height', h / 2);
        }

        elem.classList.add('retina_active');
      });
    }
  }
  new RetinaJS();
}

/**
 *  @class
 *  @function ModalDialog
 */
if (!customElements.get('modal-dialog')) {
  class ModalDialog extends HTMLElement {
    constructor() {
      super();
      this.querySelector('[id^="ModalClose-"]').addEventListener(
        'click',
        this.hide.bind(this)
      );
      this.addEventListener('keyup', (event) => {
        if (event.code.toUpperCase() === 'ESCAPE') this.hide();
      });
      if (this.classList.contains('media-modal')) {
        this.addEventListener('pointerup', (event) => {
          if (event.pointerType === 'mouse' && !event.target.closest('product-model')) this.hide();
        });
      } else {
        this.addEventListener('click', (event) => {
          if (event.target.nodeName === 'MODAL-DIALOG') this.hide();
        });
      }
    }

    connectedCallback() {
      if (this.moved) return;
      this.moved = true;
      document.body.querySelector('#wrapper').appendChild(this);
    }

    show(opener) {
      this.openedBy = opener;
      document.body.classList.add('overflow-hidden');
      this.setAttribute('open', '');
    }

    hide() {
      document.body.classList.remove('overflow-hidden');
      this.removeAttribute('open');
      this.querySelectorAll('.js-youtube').forEach((video) => {
        video.contentWindow.postMessage('{"event":"command","func":"' + 'pauseVideo' + '","args":""}', '*');
      });
      this.querySelectorAll('.js-vimeo').forEach((video) => {
        video.contentWindow.postMessage('{"method":"pause"}', '*');
      });
      this.querySelectorAll('video').forEach((video) => video.pause());
    }
  }
  customElements.define('modal-dialog', ModalDialog);
  class ModalOpener extends HTMLElement {
    constructor() {
      super();

      const button = this.querySelector('button');

      if (!button) return;
      button.addEventListener('click', () => {
        const modal = document.querySelector(this.getAttribute('data-modal'));
        if (modal) modal.show(button);
      });
    }
  }
  customElements.define('modal-opener', ModalOpener);
}


window.addEventListener('resize', () => {
  document.querySelectorAll('.footer .widget--menu').forEach((detail) => {
    if (window.innerWidth < 768) {
      detail.removeAttribute('open');
    } else {
      detail.setAttribute('open', '');
    }
  });
});
window.addEventListener('DOMContentLoaded', () => {
  if (typeof CartDrawer !== 'undefined') {
    new CartDrawer({ animations: true });
  }
  if (typeof ScrollAnimation !== 'undefined') {
    new ScrollAnimation();
  }
});